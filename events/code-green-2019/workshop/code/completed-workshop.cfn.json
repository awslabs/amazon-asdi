{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Outputs": {
    "WebsiteUrl": {
      "Description": "Url of website to visit to use endpoint",
      "Value": {
        "Fn::Sub": "http://code-green-asdi.s3-website-us-east-1.amazonaws.com?endpoint=https%3A%2F%2F${ServerlessRestApi}.execute-api.us-east-1.amazonaws.com%2FProd%2Fquery"
      }
    },
    "QueryEndpoint": {
      "Description": "API Endpoint to invoke query",
      "Value": {
        "Fn::Sub": "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/query/"
      }
    },
    "QueryInvokeFunction": {
      "Description": "ARN of Lambda for Invoking Query",
      "Value": {
        "Fn::GetAtt": "GHCNFunction.Arn"
      }
    }
  },
  "Resources": {
    "GHCNDatabase": {
      "Type": "AWS::Glue::Database",
      "Properties": {
        "DatabaseInput": {
          "Description": "GHCN DB for Code Green Hackathon"
        },
        "CatalogId": {
          "Ref": "AWS::AccountId"
        }
      }
    },
    "ServerlessRestApiDeploymentdc1a9cc033": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ServerlessRestApi"
        },
        "Description": "RestApi deployment id: dc1a9cc0334b162948a679437613612ba89968fa",
        "StageName": "Stage"
      }
    },
    "ServerlessRestApiProdStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "ServerlessRestApiDeploymentdc1a9cc033"
        },
        "RestApiId": {
          "Ref": "ServerlessRestApi"
        },
        "StageName": "Prod"
      }
    },
    "CodeGreenHackathonDataBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Status": "Enabled",
              "Prefix": "query-results/",
              "Id": "ExpireAthenaQueryResults",
              "ExpirationInDays": 1
            }
          ]
        },
        "Tags": [
          {
            "Value": "AWS-CodeGreen-Hackathon",
            "Key": "project"
          }
        ]
      }
    },
    "GHCNFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSLambdaExecute"
        ],
        "Policies": [
          {
            "PolicyName": "GHCNFunctionRolePolicy1",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "s3:GetObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": [
                        "${BucketArn}/*",
                        {
                          "BucketArn": {
                            "Fn::GetAtt": "CodeGreenHackathonDataBucket.Arn"
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": "CodeGreenHackathonDataBucket.Arn"
                    },
                    "arn:aws:s3:::noaa-ghcn-pds/csv/*",
                    "arn:aws:s3:::noaa-ghcn-pds",
                    {
                      "Fn::Sub": "arn:aws:s3:::${StadiumDataS3Bucket}/stadium-data/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${StadiumDataS3Bucket}"
                    }
                  ],
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "s3:GetBucketLocation",
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:ListMultipartUploadParts",
                    "s3:AbortMultipartUpload",
                    "s3:CreateBucket",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": "CodeGreenHackathonDataBucket.Arn"
                    },
                    {
                      "Fn::Sub": [
                        "${BucketArn}/query-results/*",
                        {
                          "BucketArn": {
                            "Fn::GetAtt": "CodeGreenHackathonDataBucket.Arn"
                          }
                        }
                      ]
                    }
                  ],
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "glue:GetTable"
                  ],
                  "Resource": [
                    "*"
                  ],
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "athena:StartQueryExecution",
                    "athena:GetQueryResults",
                    "athena:GetQueryExecution"
                  ],
                  "Resource": [
                    "*"
                  ],
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "GHCNFunctionInvokeQueryPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "FunctionName": {
          "Ref": "GHCNFunction"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/*/query",
            {
              "__Stage__": "*",
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              }
            }
          ]
        }
      }
    },
    "GHCNFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "code-green-asdi",
          "S3Key": "sam-deployments/d5cf5c5f5cf72dd168d865af2dfd5d4a"
        },
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "MemorySize": 256,
        "Environment": {
          "Variables": {
            "GHCN_TABLE_NAME": {
              "Ref": "GHCNTable"
            },
            "S3_QUERY_OUTPUT_LOCATION": {
              "Fn::Sub": "s3://${CodeGreenHackathonDataBucket}/query-results/"
            },
            "GLUE_DATABASE": {
              "Ref": "GHCNDatabase"
            },
            "STADIUM_TABLE_NAME": {
              "Ref": "Stadium"
            }
          }
        },
        "Handler": "app.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "GHCNFunctionRole",
            "Arn"
          ]
        },
        "Timeout": 29,
        "Runtime": "python3.7"
      }
    },
    "Stadium": {
      "Type": "AWS::Glue::Table",
      "Properties": {
        "TableInput": {
          "Description": "GHCN Observations",
          "TableType": "EXTERNAL_TABLE",
          "Parameters": {
            "EXTERNAL": true,
            "has_encrypted_data": false
          },
          "StorageDescriptor": {
            "SerdeInfo": {
              "SerializationLibrary": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
              "Parameters": {
                "serialization.format": ",",
                "field.delim": ","
              }
            },
            "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
            "Columns": [
              {
                "Comment": "Name of city where stadium is located",
                "Type": "string",
                "Name": "city"
              },
              {
                "Comment": "ID of weather station closest to this stadium",
                "Type": "string",
                "Name": "station_id"
              },
              {
                "Comment": "Latitude of stadium location",
                "Type": "string",
                "Name": "lat"
              },
              {
                "Comment": "Longitude of stadium location",
                "Type": "string",
                "Name": "long"
              }
            ],
            "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
            "Location": {
              "Fn::Sub": "s3://${StadiumDataS3Bucket}/stadium-data/"
            }
          }
        },
        "DatabaseName": {
          "Ref": "GHCNDatabase"
        },
        "CatalogId": {
          "Ref": "AWS::AccountId"
        }
      }
    },
    "GHCNTable": {
      "Type": "AWS::Glue::Table",
      "Properties": {
        "TableInput": {
          "Description": "GHCN Observations",
          "TableType": "EXTERNAL_TABLE",
          "Parameters": {
            "EXTERNAL": true,
            "has_encrypted_data": false
          },
          "StorageDescriptor": {
            "SerdeInfo": {
              "SerializationLibrary": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
              "Parameters": {
                "serialization.format": ",",
                "field.delim": ","
              }
            },
            "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
            "Columns": [
              {
                "Comment": "ID of weather station",
                "Type": "string",
                "Name": "id"
              },
              {
                "Comment": "Date of observation, formatted YYYYMMDD",
                "Type": "string",
                "Name": "year_date"
              },
              {
                "Comment": "type of measurement",
                "Type": "string",
                "Name": "element"
              },
              {
                "Comment": "Value of measurement.  Unit varies by element",
                "Type": "string",
                "Name": "data_value"
              },
              {
                "Type": "string",
                "Name": "m_flag"
              },
              {
                "Type": "string",
                "Name": "q_flag"
              },
              {
                "Type": "string",
                "Name": "s_flag"
              },
              {
                "Type": "string",
                "Name": "obs_time"
              }
            ],
            "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
            "Location": "s3://noaa-ghcn-pds/csv"
          }
        },
        "DatabaseName": {
          "Ref": "GHCNDatabase"
        },
        "CatalogId": {
          "Ref": "AWS::AccountId"
        }
      }
    },
    "ServerlessRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Body": {
          "info": {
            "version": "1.0",
            "title": {
              "Ref": "AWS::StackName"
            }
          },
          "paths": {
            "/query": {
              "options": {
                "x-amazon-apigateway-integration": {
                  "type": "mock",
                  "requestTemplates": {
                    "application/json": "{\n  \"statusCode\" : 200\n}\n"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseTemplates": {
                        "application/json": "{}\n"
                      },
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      }
                    }
                  }
                },
                "consumes": [
                  "application/json"
                ],
                "summary": "CORS support",
                "responses": {
                  "200": {
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      }
                    },
                    "description": "Default response for CORS method"
                  }
                },
                "produces": [
                  "application/json"
                ]
              },
              "x-amazon-apigateway-any-method": {
                "x-amazon-apigateway-integration": {
                  "httpMethod": "POST",
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GHCNFunction.Arn}/invocations"
                  }
                },
                "responses": {}
              }
            }
          },
          "swagger": "2.0"
        }
      }
    }
  },
  "Description": "Creates Infrastructure for Code Green Workshop",
  "Parameters": {
    "StadiumDataS3Bucket": {
      "Default": "code-green-asdi",
      "Type": "String",
      "Description": "S3 Bucket where CSV of stadiums with weather stations is located"
    }
  }
}